<!DOCTYPE html>
<html lang="en-us">
  <head>
    <meta charset="UTF-8">
    <title>Standard Notes Protocol by standardnotes</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" type="text/css" href="stylesheets/normalize.css" media="screen">
    <link href='https://fonts.googleapis.com/css?family=Open+Sans:400,700' rel='stylesheet' type='text/css'>
    <link rel="stylesheet" type="text/css" href="stylesheets/stylesheet.css" media="screen">
    <link rel="stylesheet" type="text/css" href="stylesheets/github-light.css" media="screen">
  </head>
  <body>
    <section class="page-header">
      <h1 class="project-name">Standard Notes Protocol</h1>
      <h2 class="project-tagline"></h2>
      <a href="https://github.com/standardnotes/standard-notes-protocol" class="btn">View on GitHub</a>
      <a href="https://github.com/standardnotes/standard-notes-protocol/zipball/master" class="btn">Download .zip</a>
      <a href="https://github.com/standardnotes/standard-notes-protocol/tarball/master" class="btn">Download .tar.gz</a>
    </section>

    <section class="main-content">
      <p>OpenNotes Specification</p>

<p>Version 0.10.0</p>

<h2>
<a id="preamble" class="anchor" href="#preamble" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Preamble</h2>

<p>Notes are an essential part of human life, a tradition dating back tens of thousands of years. A person a thousand years ago may not have had much: a home, some food, family, and quite often, a journal. These thoughts, scribbled down on paper, belonged to no one but the authors themselves.</p>

<p>Today, our notes are owned by Evernote Incorporated; by Google Incorporated; by Apple Inc. We do not own our own notes. They are owned by for-profit corporations, who are today at the mercy of paranoid governments looking to extend their reach as far as possible.</p>

<p>These platforms also typically lock you in, so that it's either difficult or inconvenient to transfer to another service.</p>

<p>OpenNotes is an open specification for a simple and secure system of organizing notes and groups of notes, and also publishing groups and notes onto the internet. Because it is an open protocol, a user need not be locked in to any application. Indeed, a user may even use multiple applications on different platforms to manage the same dataset.</p>

<h2>
<a id="introduction" class="anchor" href="#introduction" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Introduction</h2>

<p>This document outlines the specifications for the client-server communications of the OpenNotes system. Any client can communicate with an OpenNotes server as long as it understands the server's requirements.</p>

<h3>
<a id="models" class="anchor" href="#models" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Models</h3>

<p>The protocol consists of four main models:</p>

<ul>
<li>User</li>
<li>Notes</li>
<li>Groups</li>
<li>Presentations</li>
</ul>

<h4>
<a id="user" class="anchor" href="#user" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>User</h4>

<p>A user model has the following properties:</p>

<p>| name | type | description |
|---|---|
| email | Integer | The email of the user. | 
| password | String | The password for this user. <em>Clients must enforce a 24 character minimum for passwords.</em> | 
| username (<em>optional</em>) | String | A unique username used for presentations. For servers that manage multiple Users, the username serves as a way to namespace presentations.| </p>

<h4>
<a id="notes" class="anchor" href="#notes" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Notes</h4>

<p>Note models have the following properties:</p>

<p>| name | type | description |
|---|---|
| id | Integer | The id for this note. These ids are relative to the server hosting the data, and may change if a user initiated export and import occurs. | 
| uuid | String | The unique global identifier for this note. This uuid does not change during new data imports. | 
| content | Text | The JSON string encoded content of the note.| 
| loc_eek | String | The locally encrypted encryption key for this note. | 
| group_id (<em>optional</em>) | Integer | The identifier of the group this note belongs to. | 
| created_at | Date | The date this note was created. | 
| modified_at | Date | The date this note was modified. | </p>

<p>Definitions:</p>

<p><strong>content</strong>: The content of a note is a JSON encoded string with the following format: </p>

<pre><code>{title: _note_title_, text: _note_text_}
</code></pre>

<h4>
<a id="groups" class="anchor" href="#groups" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Groups</h4>

<p>Group models have the following properties:</p>

<p>| name | type | description |
|---|---|
| id | Integer | The id for this group. | 
| uuid | String | The unique global identifier for this group. This uuid does not change during new data imports. | 
| name | String | The name of the group. | 
| created_at | Date | The date this group was created. | 
| modified_at | Date | The date this group was modified. | </p>

<h4>
<a id="presentations" class="anchor" href="#presentations" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Presentations</h4>

<p>Presentations are how groups and notes are presented to the public. Groups and notes are by default unpresented and hidden from public view. However, a user may choose to make a group or a note publicly viewable.</p>

<p>A group or a note with a presentation can be accessed by the presentation's <code>url</code>, which the server computes and returns with the presentation payload.</p>

<p>Notes with a presentation are stored on the server without client-side encryption.</p>

<p>| name | type | description |
|---|---|
| id | Integer | The id for this presentation. | 
| uuid | String | The unique global identifier for this presentation. This uuid does not change during new data imports. | 
| root_path (<em>read-only</em>)| String | The root path of this presentation, as decided by the server. |
| relative_path | String | The relative location of this presentation, with respect to the root_path. This path can be chosen by the client user.|
| url (<em>read-only</em>)| String | The full URL of this presentation. The server decides what this URL is, and should be based off the root and relative path.|
| presentable_type | String | The class of the object being presented. This can be set to "Note" or "Group". | 
| presentable_id | String | The identifier of the object being presented. This will be the identifier of the Note or Group being presented. | 
| created_at | Date | The date this presentation was created. | 
| modified_at | Date | The date this presentation was modified. | </p>

<p>Presentation models have the following properties:</p>

<p><em>Date.</em></p>

<h3>
<a id="rest-api" class="anchor" href="#rest-api" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>REST API</h3>

<p>General:</p>

<ol>
<li>
<p>All requests after the initial authentication should be authenticated with a JWT with the <code>Authorization</code> header:</p>

<pre><code>Authorization: Bearer _insert_JWT_here_
</code></pre>
</li>
<li>All responses include the object in question <em>un-nested</em>. That is, if you're GETting a /groups/1, the group object will be in the root JSON response, and not under a "group" key.</li>
</ol>

<h4>
<a id="auth" class="anchor" href="#auth" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Auth</h4>

<p>OpenNotes uses JSON Web Tokens (JWT) for authentication.</p>

<p>| path | description | params |
|---|---|
| POST <em>auth</em> | Registers a user and returns a JWT. | email, password, password_confirmation|
| PATCH <em>auth</em> | Updates a user's password. | email, password, password_confirmation, current_password| 
| POST <em>auth/sign_in</em> | Authenticates a user and returns a JWT. | email, password| </p>

<h4>
<a id="users" class="anchor" href="#users" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Users</h4>

<p>| path | description | params | sample response|
|---|---|
| GET /users/me | Returns the current user as well as all the user's notes, groups, and presentations. | | {"email" : "<a href="mailto:user@email.com">user@email.com</a>", "notes": [], "groups": [], "presentations": [] } | </p>

<h4>
<a id="groups-1" class="anchor" href="#groups-1" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Groups</h4>

<p>| path | description | params |
|---|---|
| GET /groups | Gets all groups for current user. | | 
| GET /groups/:id | Gets a particular group. | |
| POST /groups | Creates a new group. | |
| PATCH /groups/:id | Updates a group. | |
| DELETE /groups/:id | Deletes a group. | |
| POST /groups/:id/presentation | Associates a presentation object with this group. Groups typically live on the root_path. | |
| PATCH /groups/:id/presentation | Updates the group's presentation. | |
| DELETE /groups/:id/presentation | Deletes the group's presentation. | |</p>

<h4>
<a id="notes-1" class="anchor" href="#notes-1" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Notes</h4>

<p>| path | description | params |
|---|---|
| GET /notes | Gets all notes for current user. | <code>modified_after</code>: Optional. Return only notes modified after a certain date.| 
| GET /notes/:id | Gets a particular note. | |
| POST /notes | Creates a new note. | |
| PATCH /notes/:id | Updates a note. | |
| DELETE /notes/:id | Deletes a note. | |
| POST /notes/:id/presentation | Associates a presentation object with this note. Notes presented outside the context of a group typically live on the root_path, and can either be a parameterization of the note title, or a random token. | |
| PATCH /notes/:id/presentation | Updates the note's presentation. | |
| DELETE /notes/:id/presentation | Deletes the note's presentation. | |</p>

<h4>
<a id="presentations-1" class="anchor" href="#presentations-1" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Presentations</h4>

<p>| path | description | params |
|---|---|
| GET /presentations/:root_path/:relative_path | Returns the presentation and the associated object (group or note) at the <code>root_path</code> and <code>relative_path</code>. <code>relative_path</code> is optional. | | </p>

<h3>
<a id="importexport" class="anchor" href="#importexport" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Import/Export</h3>

<p>The export file is a JSON file that follows a standard format, and is unencrypted.</p>

<p><strong>Export file format:</strong></p>

<pre><code>{
    "groups": [
        {
            "id": "",
            "uuid": "",
            "name": "",
            "created_at": "",
            "modified_at": ""
        }
    ],
    "notes": [
        {
            "id": "",
            "uuid" : "",
            "content": "",
            "group_id": "",
            "created_at": "",
            "modified_at": ""
        }
    ],
    "presentations": [
        {
            "id": "",
            "uuid": "",         
            "root_path": "",            
            "relative_path":    "",
            "presentable_id" : "",
            "presentable_type" : "",
            "created_at": "",
            "modified_at": ""
        }
    ]
}
</code></pre>

<p>High-level flow, user wants to switch clients and servers:</p>

<ol>
<li>User chooses "Export" option on client A, which is paired with server A.</li>
<li>Client produces JSON file with all notes unencrypted.</li>
<li>User uploads JSON file to client B.</li>
<li>Client B iterates over notes and encrypts the content of each of them locally.</li>
<li>Client B sends updated JSON (with encrypted note content) data to server B.</li>
</ol>

<p>| path | description | params |
|---|---|
| POST /import | Imports JSON data. The server must preserve the relationships between groups, notes, and presentations. See {link} for a reference implementation. | data (the JSON data as specified above) | </p>

<h3>
<a id="encryption" class="anchor" href="#encryption" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Encryption</h3>

<p>Encryption and security should always be top of mind with OpenNotes. </p>

<p>It is important that there exist a seperation of concerns between the server and the client. That is, the client should not trust the server, and vice versa. Encryption keys are generated by stretching the user's input password using PBKDF2. The resulting 512 bit key is then split in two - the first half is sent to the server as the user's password, and the second half is saved locally as the user's master encryption key. This way, the server can never calculate the encryption key.</p>

<p>The following are general requirements for clients and servers:</p>

<ol>
<li>Note <code>content</code> must be encrypted locally before being sent to server.</li>
<li>Client-server connections must be made securely through SSL/TLS.</li>
<li>Upon receiving data from client, servers should encrypt sensitive data once more before storing with a key only the server knows. The server should decrypt this data before sending back to client.</li>
</ol>

<h4>
<a id="user-password-encryption-and-key-generation" class="anchor" href="#user-password-encryption-and-key-generation" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>User Password Encryption and Key Generation</h4>

<p><strong>Client-side:</strong></p>

<ol>
<li>User enters "user inputted password" (<code>uip</code>) into registration or login password field.</li>
<li>Client manipulates <code>uip</code> before sending to server as <code>password</code>:
a. Stretch <code>uip</code> using PBKDF2 with 3000 iterations, SHA512 as hashing algorithm, and user's email as salt.
b. Split result from (a) in two halves: 
    - First half will be the <code>password</code> sent to the server. 
    - Second half will be the user's global encryption key (<code>gk</code>) (stored locally and never sent to server.)</li>
</ol>

<h4>
<a id="note-encryption" class="anchor" href="#note-encryption" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Note Encryption</h4>

<p><strong>Client-side:</strong></p>

<p>A note is encrypted using a random key locally generated for each note.</p>

<p>For every note,</p>

<p><strong>If note does not have an associated presentation:</strong></p>

<ol>
<li>Generate a random key <code>ek</code>. </li>
<li>Encrypt <code>content</code> using AES with <code>ek</code> as the secret.</li>
<li>Generate locally encrypted encryption key <code>loc_eek</code> by encrypting <code>ek</code> using AES and <code>gk</code> as the secret.</li>
<li>Send <code>content</code> and <code>loc_eek</code> to the server. (Do not send <code>ek</code>, which can be used to decrypt the note.)</li>
</ol>

<p><strong>If note has presentation:</strong></p>

<ol>
<li>Send <code>content</code> in plain text to server.</li>
</ol>

<p>By generating a unique key for every note, this allows for easier changing of a user's password — only the note's <code>ek</code> will have to be re-encrypted with the new <code>gk</code>, and not the entire contents of the note. For password change instructions, see {link}.</p>

<p><strong>Server-side:</strong></p>

<p>For every received note:</p>

<ol>
<li>Encrypt <code>content</code> using server known key and store as <code>enc_content</code>. Decrypt before sending back to client as <code>content</code>.</li>
</ol>

<h4>
<a id="sharingpublishing" class="anchor" href="#sharingpublishing" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Sharing/publishing</h4>

<p>When a note is shared, it is accessible by the public. To share a note, you create a presentation object on the note.</p>

<p>When presenting,</p>

<ol>
<li>For sharing a single note, the client must remove local encryption from the note.</li>
<li>For sharing an entire group, the client must remove local encryption for all notes belonging to the group.</li>
</ol>

<p>When un-presenting,</p>

<ol>
<li>For un-presenting a single note, the client must encrypt the note <strong>if</strong> the note doesn't belong to a presented group.</li>
<li>For un-presenting a group, the client must encrypt all notes belonging to this group, except for notes that are individually presented.</li>
</ol>

      <footer class="site-footer">
        <span class="site-footer-owner"><a href="https://github.com/standardnotes/standard-notes-protocol">Standard Notes Protocol</a> is maintained by <a href="https://github.com/standardnotes">standardnotes</a>.</span>

        <span class="site-footer-credits">This page was generated by <a href="https://pages.github.com">GitHub Pages</a> using the <a href="https://github.com/jasonlong/cayman-theme">Cayman theme</a> by <a href="https://twitter.com/jasonlong">Jason Long</a>.</span>
      </footer>

    </section>

  
  </body>
</html>
